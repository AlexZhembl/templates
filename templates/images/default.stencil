// Generated using SwiftGen, by O.Halligon â€” https://github.com/SwiftGen/SwiftGen

{% if images %}
#if os(OSX)
  import AppKit.NSImage
  typealias Image = NSImage
#elseif os(iOS) || os(tvOS) || os(watchOS)
  import UIKit.UIImage
  typealias Image = UIImage
#endif

// swiftlint:disable file_length
{% macro recursiveBlock images %}
  {% for image in images %}
  {% if not image.items %}
  case {{image.value|swiftIdentifier|escapeReservedKeywords}} = "{{image.value}}"
  {% else %}
  {% call recursiveBlock image.items %}
  {% endif %}
  {% endfor %}
{% endmacro %}

// swiftlint:disable identifier_name line_length type_body_length
{% set enumName %}{{param.enumName|default:"Asset"}}{% endset %}
enum {{enumName}}: String {
  {% for catalog in catalogs %}
  {% call recursiveBlock catalog.assets %}
  {% endfor %}
}
// swiftlint:enable identifier_name line_length type_body_length

extension {{enumName}} {
  var image: Image {
    let bundle = NSBundle(forClass: BundleToken.self)
    #if os(iOS) || os(tvOS)
    let image = Image(named: rawValue, inBundle: bundle, compatibleWithTraitCollection: nil)
    #elseif os(OSX)
    let image = bundle.imageForResource(rawValue)
    #elseif os(watchOS)
    let image = Image(named: rawValue)
    #endif
    guard let result = image else { fatalError("Unable to load image \(rawValue).") }
    return result
  }
}

extension Image {
  convenience init!(asset: {{enumName}}) {
    #if os(iOS) || os(tvOS)
    let bundle = NSBundle(forClass: BundleToken.self)
    self.init(named: asset.rawValue, inBundle: bundle, compatibleWithTraitCollection: nil)
    #elseif os(OSX) || os(watchOS)
    self.init(named: asset.rawValue)
    #endif
  }
}

private final class BundleToken {}
{% else %}
// No image found
{% endif %}
